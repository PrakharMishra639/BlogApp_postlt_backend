let verify,User;_f4a‍.x([["authGuard",()=>authGuard],["adminGuard",()=>adminGuard]]);_f4a‍.w("jsonwebtoken",[["verify",["verify"],function(v){verify=v}]]);_f4a‍.w("../models/User",[["default",["User"],function(v){User=v}]]);


       const authGuard = async (req, res, next) => {
    if (req.headers.authorization &&
        req.headers.authorization.startsWith("Bearer")) {
        try {
            const token = req.headers.authorization.split(" ")[1];
            const { id } = verify(token, '123456');
            req.user = await User.findById(id).select("-password");
            next();
        } catch (error) {
            let err = new Error("Not authorised, Token failed");
            err.statusCode = 401;
            next(err);
        }
    } else {
        let error = new Error("Not authorised, No token");
        error.statusCode = 401;
        next(error);
    }
};


       const adminGuard = (req, res, next) => {
    if (req.user && req.user.admin) {
      next();
    } else {
      let error = new Error("Not authorized as an admn");
      error.statusCode = 401;
      next(error);
    }
  };